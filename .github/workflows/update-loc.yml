name: Update Lines of Code

on:
  schedule:
    - cron: '0 0 * * *'  # Run daily at midnight UTC
  workflow_dispatch:  # Allow manual trigger
  push:
    branches:
      - main
    paths:
      - '.github/workflows/update-loc.yml'  # Run when workflow file changes

jobs:
  update-loc:
    runs-on: ubuntu-latest
    permissions:
      contents: write
    
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
      
      - name: Install tokei
        run: |
          echo "Installing tokei..."
          wget -q https://github.com/XAMPPRocky/tokei/releases/latest/download/tokei-x86_64-unknown-linux-gnu.tar.gz
          tar xf tokei-x86_64-unknown-linux-gnu.tar.gz
          sudo mv tokei /usr/local/bin/
          rm tokei-x86_64-unknown-linux-gnu.tar.gz
          echo "tokei version: $(tokei --version)"
      
      - name: Setup GitHub CLI
        run: |
          echo "GitHub CLI version: $(gh --version)"
      
      - name: Count lines of code
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          echo "Starting line counting process..."
          
          # Create temp directory
          mkdir -p temp_repos
          cd temp_repos
          
          # Get authenticated user
          USERNAME=$(gh api /user | jq -r '.login')
          echo "Counting repositories for user: $USERNAME"
          
          # Get all non-forked repos (handle pagination)
          echo "Fetching repository list..."
          gh api "/users/$USERNAME/repos?type=owner&per_page=100" --paginate | \
            jq -r '.[] | select(.fork == false) | .clone_url' > repos.txt
          
          # Initialize counters
          total_lines=0
          total_files=0
          repo_count=0
          declare -A language_stats
          
          # Count repositories
          total_repos=$(wc -l < repos.txt)
          echo "Found $total_repos non-forked repositories"
          
          # Process each repository
          while IFS= read -r repo; do
            if [ -z "$repo" ]; then
              continue
            fi
            
            repo_name=$(basename "$repo" .git)
            echo "Processing: $repo_name"
            
            # Clone with depth 1 for speed
            if git clone --depth 1 --quiet "$repo" "$repo_name" 2>/dev/null; then
              # Run tokei and save output
              tokei "$repo_name" --output json > "${repo_name}.json" 2>/dev/null || echo "{}" > "${repo_name}.json"
              
              # Extract metrics using jq with error handling
              if [ -s "${repo_name}.json" ] && jq -e . "${repo_name}.json" >/dev/null 2>&1; then
                lines=$(jq -r '.Total.code // 0' "${repo_name}.json")
                files=$(jq -r '.Total.files // 0' "${repo_name}.json")
                
                # Add to totals
                total_lines=$((total_lines + lines))
                total_files=$((total_files + files))
                
                # Extract language statistics
                jq -r 'to_entries | .[] | select(.key != "Total") | "\(.key) \(.value.code // 0)"' "${repo_name}.json" | \
                while read -r lang count; do
                  echo "$lang $count" >> ../language_stats.txt
                done
                
                echo "  - Lines: $lines, Files: $files"
              else
                echo "  - Failed to parse tokei output"
              fi
              
              # Clean up repository
              rm -rf "$repo_name" "${repo_name}.json"
            else
              echo "  - Failed to clone repository"
            fi
            
            repo_count=$((repo_count + 1))
          done < repos.txt
          
          # Aggregate language statistics
          echo "Aggregating language statistics..."
          language_json="{"
          first=true
          
          if [ -f ../language_stats.txt ]; then
            # Sort and sum language stats
            sort ../language_stats.txt | awk '{arr[$1]+=$2} END {for (i in arr) print i, arr[i]}' | \
            sort -k2 -nr | head -20 | \
            while read -r lang count; do
              if [ "$first" = true ]; then
                first=false
              else
                language_json+=","
              fi
              language_json+="\"$lang\":$count"
            done
          fi
          language_json+="}"
          
          # Format the number for display
          if [ $total_lines -ge 1000000000 ]; then
            formatted=$(awk "BEGIN {printf \"%.1fB+\", $total_lines/1000000000}")
          elif [ $total_lines -ge 1000000 ]; then
            formatted=$(awk "BEGIN {printf \"%.0fM+\", $total_lines/1000000}")
          elif [ $total_lines -ge 1000 ]; then
            formatted=$(awk "BEGIN {printf \"%.0fK+\", $total_lines/1000}")
          else
            formatted="${total_lines}+"
          fi
          
          echo "Total lines of code: $total_lines ($formatted)"
          echo "Total files: $total_files"
          echo "Repositories counted: $repo_count"
          
          # Update stats-simple.json
          cat > ../stats-simple.json << EOF
{
  "lines_of_code": $total_lines,
  "repositories": $repo_count,
  "last_updated": "$(date -u +%Y-%m-%dT%H:%M:%SZ)",
  "formatted": "$formatted"
}
EOF
          
          # Update stats.json with detailed information
          cat > ../stats.json << EOF
{
  "total_lines": $total_lines,
  "total_files": $total_files,
  "repositories": $repo_count,
  "languages": $language_json,
  "last_updated": "$(date -u +%Y-%m-%dT%H:%M:%SZ)",
  "formatted": "$formatted",
  "username": "$USERNAME"
}
EOF
          
          # Clean up
          cd ..
          rm -rf temp_repos language_stats.txt
          
          echo "Stats files updated successfully"
      
      - name: Commit and push changes
        run: |
          git config --global user.name 'github-actions[bot]'
          git config --global user.email 'github-actions[bot]@users.noreply.github.com'
          
          # Check if files have changed
          if git diff --quiet stats-simple.json stats.json; then
            echo "No changes to commit"
          else
            git add stats-simple.json stats.json
            git commit -m "ðŸ”„ Update lines of code stats

            Lines of Code: $(jq -r .formatted stats-simple.json)
            Repositories: $(jq -r .repositories stats-simple.json)
            Last Updated: $(jq -r .last_updated stats-simple.json)"
            
            git push
            echo "Changes pushed successfully"
          fi
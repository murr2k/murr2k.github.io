name: Count Lines

on:
  workflow_dispatch:
  schedule:
    - cron: '0 0 * * *'

jobs:
  count:
    runs-on: ubuntu-latest
    permissions:
      contents: write
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
      
      - name: Install tokei
        run: |
          wget -q https://github.com/XAMPPRocky/tokei/releases/latest/download/tokei-x86_64-unknown-linux-gnu.tar.gz
          tar xf tokei-x86_64-unknown-linux-gnu.tar.gz
          sudo mv tokei /usr/local/bin/
          rm tokei-x86_64-unknown-linux-gnu.tar.gz
      
      - name: Count lines of code
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          mkdir -p temp_repos
          cd temp_repos
          
          # Get username
          USERNAME=$(gh api /user | jq -r '.login')
          echo "User: $USERNAME"
          
          # Get non-forked repos
          gh api "/users/$USERNAME/repos?type=owner&per_page=100" --paginate | \
            jq -r '.[] | select(.fork == false) | .clone_url' > repos.txt
          
          total_lines=0
          repo_count=0
          
          # Count lines in each repo
          while IFS= read -r repo; do
            [ -z "$repo" ] && continue
            repo_name=$(basename "$repo" .git)
            echo "Processing $repo_name..."
            
            if git clone --depth 1 -q "$repo" "$repo_name" 2>/dev/null; then
              lines=$(tokei "$repo_name" -o json 2>/dev/null | jq -r '.Total.code // 0' 2>/dev/null || echo "0")
              total_lines=$((total_lines + lines))
              rm -rf "$repo_name"
            fi
            repo_count=$((repo_count + 1))
          done < repos.txt
          
          # Format number
          if [ $total_lines -ge 1000000 ]; then
            formatted=$(printf "%.0fM+" $(echo "$total_lines/1000000" | bc -l))
          elif [ $total_lines -ge 1000 ]; then
            formatted=$(printf "%.0fK+" $(echo "$total_lines/1000" | bc -l))
          else
            formatted="${total_lines}+"
          fi
          
          # Create stats file
          cat > ../stats-simple.json << EOF
{
  "lines_of_code": $total_lines,
  "repositories": $repo_count,
  "last_updated": "$(date -u +%Y-%m-%dT%H:%M:%SZ)",
  "formatted": "$formatted"
}
EOF
          
          cd ..
          rm -rf temp_repos
      
      - name: Commit changes
        run: |
          git config user.name 'github-actions[bot]'
          git config user.email 'github-actions[bot]@users.noreply.github.com'
          
          if git diff --quiet stats-simple.json; then
            echo "No changes"
          else
            git add stats-simple.json
            git commit -m "ðŸ”„ Update LOC stats"
            git push
          fi